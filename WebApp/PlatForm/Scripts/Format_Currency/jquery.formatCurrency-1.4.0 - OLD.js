!function(e) { function r(r) { var t = e.formatCurrency.regions[r]; if (t) return t; if (/(\w+)-(\w+)/g.test(r)) { var n = r.replace(/(\w+)-(\w+)/g, "$1"); return e.formatCurrency.regions[n] } return null } function t(e) { switch (e.toLowerCase()) { case "int": return "Int"; case "float": return "Float"; default: throw "invalid parseType" } } function n(e) { if ("" === e.symbol) return new RegExp("[^\\d" + e.decimalSymbol + "-]", "g"); var r = e.symbol.replace("$", "\\$").replace(".", "\\."); return new RegExp(r + "|[^\\d" + e.decimalSymbol + "-]", "g") } e.formatCurrency = {}, e.formatCurrency.regions = [], e.formatCurrency.regions[""] = { symbol: "$", positiveFormat: "%s%n", negativeFormat: "(%s%n)", decimalSymbol: ".", digitGroupSymbol: ",", groupDigits: !0 }, e.fn.formatCurrency = function(t, a) { 1 == arguments.length && "string" != typeof t && (a = t, t = !1); var i = { name: "formatCurrency", colorize: !1, region: "", global: !0, roundToDecimalPlace: 2, eventOnDecimalsEntered: !1 }; return i = e.extend(i, e.formatCurrency.regions[""]), a = e.extend(i, a), a.region.length > 0 && (a = e.extend(a, r(a.region))), a.regex = n(a), this.each(function() { $this = e(this); var r = "0"; if (r = $this[$this.is("input, select, textarea") ? "val" : "html"](), r.search("\\(") >= 0 && (r = "-" + r), "" !== r && ("-" !== r || -1 !== a.roundToDecimalPlace)) { if (isNaN(r)) { if (r = r.replace(a.regex, ""), "" === r || "-" === r && -1 === a.roundToDecimalPlace) return; "." != a.decimalSymbol && (r = r.replace(a.decimalSymbol, ".")), isNaN(r) && (r = "0") } var n = String(r).split("."), i = r == Math.abs(r), o = n.length > 1, l = o ? n[1].toString() : "0", s = l; if (r = Math.abs(n[0]), r = isNaN(r) ? 0 : r, a.roundToDecimalPlace >= 0 && (l = parseFloat("1." + l), l = l.toFixed(a.roundToDecimalPlace), "2" == l.substring(0, 1) && (r = Number(r) + 1), l = l.substring(2)), r = String(r), a.groupDigits) for (var c = 0; c < Math.floor((r.length - (1 + c)) / 3); c++) r = r.substring(0, r.length - (4 * c + 3)) + a.digitGroupSymbol + r.substring(r.length - (4 * c + 3)); (o && -1 == a.roundToDecimalPlace || a.roundToDecimalPlace > 0) && (r += a.decimalSymbol + l); var g = i ? a.positiveFormat : a.negativeFormat, u = g.replace(/%s/g, a.symbol); u = u.replace(/%n/g, r); var m = e([]); m = t ? e(t) : $this, m[m.is("input, select, textarea") ? "val" : "html"](u), o && a.eventOnDecimalsEntered && s.length > a.roundToDecimalPlace && m.trigger("decimalsEntered", s), a.colorize && m.css("color", i ? "black" : "red") } }) }, e.fn.toNumber = function(t) { var a = e.extend({ name: "toNumber", region: "", global: !0 }, e.formatCurrency.regions[""]); return t = jQuery.extend(a, t), t.region.length > 0 && (t = e.extend(t, r(t.region))), t.regex = n(t), this.each(function() { var r = e(this).is("input, select, textarea") ? "val" : "html"; e(this)[r](e(this)[r]().replace("(", "(-").replace(t.regex, "")) }) }, e.fn.asNumber = function(a) { var i = e.extend({ name: "asNumber", region: "", parse: !0, parseType: "Float", global: !0 }, e.formatCurrency.regions[""]); a = jQuery.extend(i, a), a.region.length > 0 && (a = e.extend(a, r(a.region))), a.regex = n(a), a.parseType = t(a.parseType); var o = e(this).is("input, select, textarea") ? "val" : "html", l = e(this)[o](); return l = l ? l : "", l = l.replace("(", "(-"), l = l.replace(a.regex, ""), a.parse ? (0 == l.length && (l = "0"), "." != a.decimalSymbol && (l = l.replace(a.decimalSymbol, ".")), window["parse" + a.parseType](l)) : l } } (jQuery);